% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ResponseContributions.R
\name{response_contributions}
\alias{response_contributions}
\title{Split response into contributions by species identities and interactions}
\usage{
response_contributions(model, communities = NULL, no_random = 3, FG = NULL)
}
\arguments{
\item{model}{A Diversity Interactions model object fit by using the \code{\link[DImodels:DI]{DI()}} function from the \code{\link[DImodels:DImodels-package]{DImodels}} package.}

\item{communities}{A dataframe specifying communities of interest for which user wants to compare response. If left blank, a random selection of communities from the original data used to fit the model would be selected}

\item{no_random}{Number of random communities to select from each level of richness from original data if communities are not specified}

\item{FG}{The functional grouping of the species in the design. Species belonging to the same functional group will be assigned with different shades of the same colour. The user can manually specify a character vector giving the functional group each species belongs to. If left empty the functional will try to get a functional grouping from the original \code{\link[DImodels:DI]{DI}} model object.}
}
\value{
A ggplot object
}
\description{
Split response into contributions by species identities and interactions
}
\examples{
#' ## Load DImodels package to fit the model
library(DImodels)

## Load data
data(sim2)

## Fit DI model
model1 <- DI(prop = 3:6, DImodel = 'FULL', data = sim2, y = 'response')

## Create visualisation
## If no communities are specified a random selection
## of communities from the original data is used
response_contributions(model1)

## Three communities are selected by default but user can modify
## Select 5 communities from each level of richness
response_contributions(model1, no_random = 4)

## Can also manually specify communities of interest
my_comms <- data.frame(p1 = c(1, 0, 0,   0.5, 1/3, 0.25),
                       p2 = c(0, 0, 0.5, 0,   1/3, 0.25),
                       p3 = c(0, 1, 0.5, 0,   1/3, 0.25),
                       p4 = c(0, 0, 0,   0.5, 0,   0.25))

response_contributions(model1, communities = my_comms)

## Group species by functional groups
response_contributions(model1, FG = c("G", "G", "H", "H"))
}
