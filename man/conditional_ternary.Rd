% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ConditionalTernary.R
\name{conditional_ternary}
\alias{conditional_ternary}
\title{Conditional ternary diagrams}
\usage{
conditional_ternary(
  model,
  tern_vars,
  conditional = NULL,
  add_var = list(),
  resolution = 3,
  plot = TRUE,
  nlevels = 7,
  colours = NULL,
  lower_lim = NULL,
  upper_lim = NULL,
  contour_text = TRUE,
  show_axis_labels = TRUE,
  show_axis_guides = FALSE,
  axis_label_size = 4,
  vertex_label_size = 5,
  nrow = 0,
  ncol = 0
)
}
\arguments{
\item{model}{A Diversity Interactions model object fit by using the
\code{\link[DImodels:DI]{DI()}} function from the
\code{\link[DImodels:DImodels-package]{DImodels}} package.}

\item{tern_vars}{A character vector giving the names of the three variables
to be shown in the ternary diagram.}

\item{conditional}{A data-frame describing the names of the variables
and their respective values at which to slice the
simplex space. The format should be, for example, as follows: \cr
\code{data.frame("p1" = c(0, 0.5), "p2" = c(0.2, 0.1))} \cr
Once figure would be created for row in `conditional` with
the respective values of all specified variables. Any
compositional variables not specified in `conditional` will
be assumed to be 0.}

\item{add_var}{A list specifying values for additional variables
in the model other than the proportions (i.e. not part of the
simplex design).
This could be useful for comparing the predictions across
different values for a non-compositional variable.
One ternary plot will be generated for each unique combination
of values specified here.}

\item{resolution}{A number between 1 and 5 describing the resolution of the
resultant graph.
A high value would result in a higher definition figure
but at the cost of being computationally expensive.}

\item{plot}{A boolean variable indicating whether to create the plot or return
the prepared data instead. The default \code{TRUE} creates the plot while
\code{FALSE} would return the prepared data for plotting. Could be useful
for if user wants to modify the data first and then call the plotting.}

\item{nlevels}{The number of levels to show on the contour map.}

\item{colours}{A character vector or function specifying the colours for the
contour map or points. The number of colours should be same as
`nlevels` if (`show = "contours"`). \cr
The default colours scheme is the
\code{\link[grDevices:terrain.colors]{terrain.colors()}} for
continuous variables and an extended version of the Okabe-Ito
colour scale for categoricl variables.}

\item{lower_lim}{A number to set a custom lower limit for the contour
(if `show = "contours"`). The default is minimum of the prediction.}

\item{upper_lim}{A number to set a custom upper limit for the contour
(if `show = "contours"`). The default is maximum of the prediction.}

\item{contour_text}{A boolean value indicating whether to include labels on
the contour lines showing their values
(if `show = "contours"`). The default is \code{TRUE}.}

\item{show_axis_labels}{A boolean value indicating whether to show axis
labels along the edges of the ternary. The default
is \code{TRUE}.}

\item{show_axis_guides}{A boolean value indicating whether to show axis
guides within the interior of the ternary. The
default is \code{FALSE}.}

\item{axis_label_size}{A numeric value to adjust the size of the axis labels
in the ternary plot. The default size is 4.}

\item{vertex_label_size}{A numeric value to adjust the size of the vertex
labels in the ternary plot. The default size is 5.}

\item{nrow}{Number of rows in which to arrange the final plot
(when `add_var` is specified).}

\item{ncol}{Number of columns in which to arrange the final plot
(when `add_var` is specified).}
}
\value{
A ggmultiplot (ggplot if single plot is returned) class object or data-frame (if `plot = FALSE`)
}
\description{
Conditional ternary diagrams are a way to visualise n-dimensional
compositional data residing in the n-1 dimensional space as 2-d ternary
diagrams. We slice the high dimensional simplex at values along the range of
particular variable(s) by conditioning the variables to have a fixed value and
visualise the change in the response with respect to the remaining three
variables in a ternary diagram such that the proportions within the ternary
would sum to 1 - x, where x is the sum of all values at which the different
variables are conditioned. Taking multiple 2-d slices across multiple
variables should allow to create an approximation of how the response varies
across the n-dimensional simplex.
This is a wrapper function specifically for statistical models fit using the
\code{\link[DImodels:DI]{DI()}} function from the
\code{\link[DImodels:DImodels-package]{DImodels}} R package and would implicitly
call \code{\link{conditional_ternary_data}} followed by
\code{\link{conditional_ternary_plot}}. If your model object isn't fit using
DImodels, consider calling these functions manually.
}
\examples{
library(DImodels)
library(dplyr)
data(sim2)
m1 <- DI(y = "response", data = sim2, prop = 3:6, DImodel = "FULL")

#' ## Create data for slicing
## We only condition on the variable "p3"
conditional_ternary(model = m1, tern_vars = c("p1", "p2", "p4"),
                    conditional = data.frame("p3" = c(0, 0.2, 0.5)),
                    resolution = 1)

## Slices for experiments for over 4 variables
data(sim4)
m2 <- DI(y = "response", prop = paste0("p", 1:6),
         DImodel = "AV", data = sim4) \%>\%
         suppressWarnings()

## Conditioning on multiple variables
cond <- data.frame(p4 = c(0, 0.2), p5 = c(0.5, 0.1), p6 = c(0, 0.3))
conditional_ternary(model = m2, conditional = cond,
                    resolution = 1)

## Create separate plots for additional variables not a part of the simplex
m3 <- DI(y = "response", prop = paste0("p", 1:6),
         DImodel = "AV", data = sim4, treat = "treatment") \%>\%
         suppressWarnings()

## Create plot and arrange it using nrow
conditional_ternary(model = m3, conditional = cond[1, ],
                    resolution = 1,
                    add_var = list("treatment" = c(50, 150, 250)),
                    nrow = 3)

## Specify `plot = FALSE` to not create the plot but return the prepared data
conditional_ternary(model = m3, conditional = cond[1, ],
                    resolution = 1, plot = FALSE,
                    add_var = list("treatment" = c(50, 150, 250)))
}
