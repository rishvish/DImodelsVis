% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AverageRichness.R
\name{average_richness}
\alias{average_richness}
\title{Visualise average response at each level of richness}
\usage{
average_richness(
  model,
  gradient = c("richness", "evenness"),
  communities = c("original", "equi"),
  threshold = NULL
)
}
\arguments{
\item{model}{A Diversity Interactions model object fit by using the \code{\link[DImodels:DI]{DI()}} function from the \code{\link[DImodels:DImodels-package]{DImodels}} package.}

\item{gradient}{Diversity gradient to show on the X-axis, one of 'richness' or 'evenness'. Defaults to 'richness'.}

\item{communities}{Communities which are used to calculate the average response. Accepts one of 'original' or 'equi'. 'original' (the default) calculates the average using the original communities from the raw data used to fit the \code{\link[DImodels:DI]{DI}} model while 'equi' uses all possible equi-proportional communities at each level of richness to calculate the average.}

\item{threshold}{For high levels of richness (>20) it might not be feasible to compute and store all equi-proportional communities. This parameter defines the number of communities randomly selected at each level of richness.}
}
\value{
A ggplot object
}
\description{
Visualise average response at each level of richness
}
\examples{
## Load DImodels package to fit the model
library(DImodels)

## Load data
data(sim4)

## Fit DI model
mod <- DI(prop = 3:8, DImodel = 'AV', data = sim4, y = 'response')

## Create visualisation

## By default, 'richness' is the gradient and commmunities from the
## raw data are used to calcualte average response
average_richness(model = mod)

## Can also calculate average response using all possible
## equi-proportional communities at each level of richness
average_richness(model = mod, communities = 'equi')

## Can also plot across evenness
data(sim5)
mod1 <- DI(prop = paste0('p', 1:9), DImodel = 'AV',
          data = sim5, y = 'response', estimate_theta = TRUE)
average_richness(model = mod1, gradient = 'evenness')
}
