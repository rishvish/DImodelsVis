% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GradientChange.R
\name{gradient_change_plot}
\alias{gradient_change_plot}
\title{Visualising average change in response over a diversity gradient.}
\usage{
gradient_change_plot(data, prop = NULL, pie_data = NULL, pie_colours = NULL)
}
\arguments{
\item{data}{A data-frame which is the output of the
`\link{gradient_change_data}` function, consisting of the
predicted response averaged over a particular diversity gradient.}

\item{prop}{A vector identifying the column-names or indices of the
columns containing the proportions in `data`.}

\item{pie_data}{A subset of data-frame specified in `data`, to visualise
the individual data-points as pie-glyphs showing the
relative proportions of the variables in the data-point.}

\item{pie_colours}{A character vector specifying the colours for the slices
within the pie-chart glyphs.}
}
\value{
A ggplot object
}
\description{
Helper for plotting average response at each level of species richness
}
\examples{
library(DImodels)
library(dplyr)

## Load data
data(sim4)

## Fit model
mod <- glm(response ~ 0 + (p1 + p2 + p3 + p4 + p5 + p6)^2, data = sim4)

## Create data
## By default response would be averaged on the basis of richness
plot_data <- gradient_change_data(data = sim4,
                                  prop = c("p1", "p2", "p3",
                                           "p4", "p5", "p6"),
                                  model = mod)
gradient_change_plot(data = plot_data,
                     prop = c("p1", "p2", "p3", "p4", "p5", "p6"))

## If prop is not specified then the observations will be shows as points
gradient_change_plot(data = plot_data)

## Average response with respect to evenness
plot_data <- gradient_change_data(data = sim4,
                          prop = c("p1", "p2", "p3", "p4", "p5", "p6"),
                          model = mod,
                          gradient = "evenness")
gradient_change_plot(data = plot_data,
                     prop = c("p1", "p2", "p3", "p4", "p5", "p6"))

## Change colours of the pie-slices
gradient_change_plot(data = plot_data,
                     prop = c("p1", "p2", "p3", "p4", "p5", "p6"),
                     pie_colours = c("darkolivegreen1", "darkolivegreen4",
                                     "orange1", "orange4",
                                     "steelblue1", "steelblue4"))


## Manually specify only specific communities to be shown as pie-chart
## glyphs using `pie_data`.
gradient_change_plot(data = plot_data,
                     prop = c("p1", "p2", "p3", "p4", "p5", "p6"),
                     pie_data = plot_data \%>\% filter(.Richness \%in\% c(1, 6)))
## Note: It is important for the data specified in
## `pie_data` to have the .Pred and .Gradient columns.
## So the best use case for this parameter is to accept
## a subset of the data specified in `data`.
}
