% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VisualiseEffects.R
\name{visualise_effects_plot}
\alias{visualise_effects_plot}
\title{Visualise the effects of species loss or species addition}
\usage{
visualise_effects_plot(data, prop, colours = NULL, se = FALSE, average = TRUE)
}
\arguments{
\item{data}{A data frame created using the \code{\link{visualise_effects_data}} function.}

\item{prop}{A vector of column names or indices identifying the columns containing the
species proportions in the data.}

\item{colours}{A character vector indicating the colours for the slices in the pie-glyphs.
If left NULL, the colour blind friednly colours will be for the pie-glyph slices.}

\item{se}{A boolean variable indicating whether to plot confidence intervals associated with
the effect of species addition or loss}

\item{average}{A boolean variable indicating whether to add a line describing the "average"
effect of species addition or loss}
}
\value{
A ggplot object
}
\description{
The plotting function which would create the effects plot. The output of the
`\code{\link{visualise_effects_data}}` function should be passed here to
visualise the effect of adding or removing a particular species from a community.
}
\examples{
library(DImodels)

## Load data
data(sim1)

## Fit model
mod <- glm(response ~ p1 + p2 + p3 + p4 + 0, data = sim1)

## Create data for visualising effect of adding species 1 to
## the original communities in the data
plot_data <- visualise_effects_data(data = sim1,
                                    prop = c("p1", "p2", "p3", "p4"),
                                    species_interest = "p1",
                                    effect = "addition", model = mod)

## Create plot
visualise_effects_plot(data = plot_data,
                       prop = c("p1", "p2", "p3", "p4"))

## Show specific curves and add prediction intervals
subset <- plot_data[plot_data$.Group \%in\% c(1,7), ]
visualise_effects_plot(data = subset, prop = 1:4, se = TRUE)

## Do not show average effect line
visualise_effects_plot(data = subset, prop = 1:4,
                       se = TRUE, average = FALSE)

## Change colours of the pie-glyph slices
visualise_effects_plot(data = subset, prop = 1:4,
                       colours = c("darkolivegreen", "darkolivegreen1",
                                   "steelblue4", "steelblue1"))
}
