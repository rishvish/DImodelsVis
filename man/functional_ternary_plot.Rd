% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FunctionalTernary.R
\name{functional_ternary_plot}
\alias{functional_ternary_plot}
\title{Conditional ternary diagrams at functional group level}
\usage{
functional_ternary_plot(
  data,
  nlevels = 7,
  colours = NULL,
  lower_lim = NULL,
  upper_lim = NULL,
  tern_labels = c("FG1", "FG2", "FG3"),
  contour_text = TRUE,
  show_axis_labels = TRUE,
  show_axis_guides = FALSE,
  axis_label_size = 4,
  vertex_label_size = 5
)
}
\arguments{
\item{data}{A data-frame which is the output of the
`\link{conditional_ternary_data}` function.}

\item{nlevels}{The number of levels to show on the contour map.}

\item{colours}{A character vector or function specifying the colours for the
contour map. The number of colours should be same as `nlevels`.
The default colours scheme is the
\code{\link[grDevices:terrain.colors]{terrain.colors()}}.}

\item{lower_lim}{A number to set a custom lower limit for the contour.
The default is minimum of the prediction.}

\item{upper_lim}{A number to set a custom upper limit for the contour.
The default is maximum of the prediction.}

\item{tern_labels}{A character vector containing the labels of the vertices
of the ternary. The default is "P1", "P2", and "P3".}

\item{contour_text}{A boolean value indicating whether to include labels on
the contour lines showing their values. The default is
\code{TRUE}.}

\item{show_axis_labels}{A boolean value indicating whether to show axis
labels along the edges of the ternary. The default
is \code{TRUE}.}

\item{show_axis_guides}{A boolean value indicating whether to show axis
guides within the interior of the ternary. The
default is \code{FALSE}.}

\item{axis_label_size}{A numeric value to adjust the size of the axis labels
in the ternary plot. The default size is 4.}

\item{vertex_label_size}{A numeric value to adjust the size of the vertex
labels in the ternary plot. The default size is 5.}
}
\value{
A data-frame with the following columns and any additional columns
        specified in `exp_str` parameter
 \describe{
   \item{.x}{The x component of the x-y projection of the simplex point.}
   \item{.y}{The y component of the x-y projection of the simplex point.}
   \item{.P1}{The first entity whose proportion is varied across the simplex.}
   \item{.P2}{The second entity whose proportion is varied across the simplex.}
   \item{.P3}{The third entity whose proportion is varied across the simplex.}
   \item{.add_str_ID}{An identifier column for grouping the cartesian product
                      of all additional columns specified in `exp_str`
                      parameter (if `exp_str` is specified).}
   \item{.Pred}{The predicted repsonse for each observation
               (if `prediction` is \code{TRUE}).}
   \item{.Lower}{The lower limit of the prediction/confidence interval
                 for each observation.}
   \item{.Upper}{The upper limit of the prediction/confidence interval
                 for each observation.}
 }

A ggplot object
}
\description{
`Will be updated soon`
}
\examples{
library(DImodels)

## Load data
data(sim4)

## Fit model
mod <- glm(response ~ 0 + (p1 + p2 + p3 + p4 + p5 + p6)^2, data = sim4)

## Create data
## By default an equal split of the FG will be assumed for each species
plot_data <- functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G3"),
                             resolution = 1,
                             model = mod)
functional_ternary_plot(plot_data,
                        tern_labels = c("G1", "G2", "G3"))

## Change the proportional split of species within an FG by using `values`
## `values` takes a numeric vector where the position of each element
## describes the proportion of the corresponding species within the
## corresponding FG. This is equvialent to looking at a different slice
## of the high dimensional simplex.
## For examples this vector describes, 0\% and 100\% of p1 and p2, respectively
## in G1, 100\% and 0\% of p3 and p4, respectively in G2 and 70\% and 30\% of
## p5 and p6, respectively in G3.
vals <- c(0, 1, 1, 0, 0.7, 0.3)
plot_data <- functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G3"),
                             values = vals,
                             resolution = 1,
                             model = mod)

functional_ternary_plot(plot_data,
                        tern_labels = c("G1", "G2", "G3"))

## When there are more than three functional groups, we can
## fix the value of one of the functional groups using `cond_FG`
## and `cond_values` like conditional_ternary
plot_data <- functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G4"),
                             resolution = 1,
                             cond_FG = "G4",
                             cond_values = c(0.2, 0.5),
                             model = mod,
                             prediction = TRUE)

functional_ternary_plot(plot_data,
                        tern_labels = c("G1", "G2", "G3"))
}
