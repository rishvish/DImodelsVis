% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Ternary.R
\name{ternary_data}
\alias{ternary_data}
\alias{ternary_plot}
\title{Create a 2-d simplex (Ternary) diagram showing change in
       response over the ternary surface}
\usage{
ternary_data(
  prop = c(".P1", ".P2", ".P3"),
  x = ".x",
  y = ".y",
  exp_str = list(),
  resolution = 3,
  prediction = TRUE,
  ...
)

ternary_plot(
  data,
  x = ".x",
  y = ".y",
  pred = ".Pred",
  nlevels = 7,
  colours = NULL,
  lower_lim = NULL,
  upper_lim = NULL,
  tern_labels = c("P1", "P2", "P3"),
  contour_text = TRUE,
  show_axis_labels = TRUE,
  show_axis_guides = FALSE,
  axis_label_size = 4,
  vertex_label_size = 5
)
}
\arguments{
\item{prop}{A character vector specifying the columns names of entities
whose proportions to manipulate. Default is ".P1", ".P2",
and ".P3".}

\item{x}{The column name or index containing the x-component of the x-y
projection of the 2-d simplex.}

\item{y}{The column name or index containing the y-component of the x-y
projection of the 2-d simplex.}

\item{exp_str}{A list specifying values for additional experimental
structures in the model other than the proportions.
This would be useful to compare the predictions across
different values for a categorical variable.
One plot will be generated for each unique combination
of values specified here.}

\item{resolution}{A number between 1 and 5 describing the resolution of the
resultant graph.
A high value would result in a higher definition figure
but at the cost of being computationally expensive.}

\item{prediction}{A logical value indicating whether to pass the final data
to `\link{add_prediction}` and add predictions to the data.
Default value is \code{TRUE}, but often it would be
desirable to make additional changes to the data before
making any predictions, so the user can set this to
\code{FALSE} and manually call the `\link{add_prediction}`
function.}

\item{...}{
  Arguments passed on to \code{\link[=add_prediction]{add_prediction}}
  \describe{
    \item{\code{model}}{A regression model object which will be used to make predictions for the observations in `data`.
Will override `coefficients` if specified.}
    \item{\code{coefficients}}{If a regression model is not available (or can't be fit in R), the regression coefficients from a model fit in some other language can be used to calculate predictions.
However, the user would have to ensure there's an appropriate one-to-one positional mapping between the data columns and the coefficient values.
Further, it would not be possible to calculate confidence/prediction intervals using this method.}
    \item{\code{coeff_cols}}{If `coefficients` are specified and there isn't a one-to-one positional mapping between}
    \item{\code{conf.level}}{The confidence level for calculating confidence/prediction intervals. Default is 0.95.}
    \item{\code{interval}}{Type of interval to calculate:
\describe{
  \item{"none" (default)}{No interval to be calculated.}
  \item{"confidence"}{Calculate a confidence interval.}
  \item{"prediction"}{Calculate a prediction interval.}
}}
  }}

\item{data}{A data-frame which is the output of the
`\link{ternary_data}` function, consisting of the x-y
plane projection of the 2-d simplex along with the predicted
response.}

\item{pred}{The column name or index containing the predicted response.}

\item{nlevels}{The number of levels to show on the contour map.}

\item{colours}{A character vector or function specifying the colours for the
contour map. The number of colours should be same as `nlevels`.
The default colours scheme is the
\code{\link[grDevices:terrain.colors]{terrain.colors()}}.}

\item{lower_lim}{A number to set a custom lower limit for the contour.
The default is minimum of the prediction.}

\item{upper_lim}{A number to set a custom upper limit for the contour.
The default is maximum of the prediction.}

\item{tern_labels}{A character vector containing the labels of the vertices
of the ternary. The default is "P1", "P2", and "P3".}

\item{contour_text}{A boolean value indicating whether to include labels on
the contour lines showing their values. The default is
\code{TRUE}.}

\item{show_axis_labels}{A boolean value indicating whether to show axis
labels along the edges of the ternary. The default
is \code{TRUE}.}

\item{show_axis_guides}{A boolean value indicating whether to show axis
guides within the interior of the ternary. The
default is \code{FALSE}.}

\item{axis_label_size}{A numeric value to adjust the size of the axis labels
in the ternary plot. The default size is 4.}

\item{vertex_label_size}{A numeric value to adjust the size of the vertex
labels in the ternary plot. The default size is 5.}
}
\value{
A data-frame with the following columns and any additional columns
        specified in `exp_str` parameter
 \describe{
   \item{.x}{The x component of the x-y projection of the simplex point.}
   \item{.y}{The y component of the x-y projection of the simplex point.}
   \item{.P1}{The first entity whose proportion is varied across the simplex.}
   \item{.P2}{The second entity whose proportion is varied across the simplex.}
   \item{.P3}{The third entity whose proportion is varied across the simplex.}
   \item{.add_str_ID}{An identifier column for grouping the cartesian product
                      of all additional columns specified in `exp_str`
                      parameter (if `exp_str` is specified).}
   \item{.Pred}{The predicted repsonse for each observation
               (if `prediction` is \code{TRUE}).}
   \item{.Lower}{The lower limit of the prediction/confidence interval
                 for each observation.}
   \item{.Upper}{The upper limit of the prediction/confidence interval
                 for each observation.}
 }

A ggplot object
}
\description{
The data preparation function to create a gradient of proportions of three
entities representing a 2 dimensional simplex (the proportions sum to 1)
representing a ternary surface along with the mapping of each point within
the simplex on to the x-y plane. The final output can then used with a
relevant statistical model to make predictions for the response as the
proportions of the three entities change over the simplex.

The plotting function to visualise response change over a 2-d simplex
surface (ternary diagram). Create the ternary surface using the
`\link{ternary_data}` function and add predictions of the
response using the `\link{add_prediction}`.
This function can then be used to visualise response change over the
ternary surface as a contour map.
}
\examples{
library(DImodels)
library(dplyr)

## Load data
data(sim0)

## Fit model
mod <- lm(response ~ 0 + (p1 + p2 + p3)^2, data = sim0)

## Create a contour map of predicted response over the ternary surface
## Remember to specify prop with the same character values as the names
## of the variables in the model containing the prop.
head(ternary_data(resolution = 1, model = mod,
                  prop = c("p1", "p2", "p3")))

## Can also add any additional experimental structures
head(ternary_data(prop = c("p1", "p2", "p3"),
                  exp_str = list("richness" = c("A", "B")),
                  resolution = 1,
                  prediction = FALSE))

## It could be desirable to take the output of this function and add
## additional variables to the data before making predictions
## Use `prediction = FALSE` to get data without any predictions
contour_data <- ternary_data(prop = c("p1", "p2", "p3"),
                  model = mod,
                  prediction = FALSE,
                  resolution = 1)
head(contour_data)

## Manually add the interaction terms
contour_data <- contour_data \%>\%
                  mutate(`p1:p2` = p1*p2,
                         `p2:p3` = p2*p3,
                         `p1:p3` = p1*p3)

## Add predictions using model coefficients
contour_data <- add_prediction(data = contour_data,
                               coefficient = mod$coefficient)
head(contour_data)
## Note: Add predictions via coefficients would not give confidence intervals
library(DImodels)
library(dplyr)

## Load data
data(sim0)

## Fit model
mod <- lm(response ~ 0 + (p1 + p2 + p3)^2, data = sim0)

## Create a contour map of predicted response over the ternary surface
## Remember to specify prop with the same character values as the names
## of the variables in the model containing the prop.
plot_data <- ternary_data(resolution = 1, model = mod,
                          prop = c("p1", "p2", "p3"))

## Create a contour plot of response across the ternary space
ternary_plot(plot_data)

## Change colour scheme
cols <- hcl.colors(7) # because there are 7 contour levels by default
ternary_plot(plot_data, colours = cols)

# Change number of contours and set custom upper and lower
# limits for the scale
ternary_plot(plot_data, nlevels = 10, colours = hcl.colors(10),
             lower_lim = 10, upper_lim = 35)

# Add axis guides
ternary_plot(plot_data, show_axis_guides = TRUE)

# Change ternary labels along with their font-size
ternary_plot(plot_data, tern_labels = c("Sp1", "Sp2", "Sp3"),
             vertex_label_size = 6, axis_label_size = 5)
}
