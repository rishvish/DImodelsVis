% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FunctionalTernary.R
\name{functional_ternary}
\alias{functional_ternary}
\title{Conditional ternary diagrams at functional group level}
\usage{
functional_ternary(
  model,
  FG,
  values = NULL,
  cond_values = NULL,
  cond_FG = NULL,
  exp_str = list(),
  resolution = 3,
  nlevels = 7,
  colours = NULL,
  lower_lim = NULL,
  upper_lim = NULL,
  contour_text = TRUE,
  show_axis_labels = TRUE,
  show_axis_guides = FALSE,
  axis_label_size = 4,
  vertex_label_size = 5,
  nrow = 0,
  ncol = 0
)
}
\arguments{
\item{model}{A Diversity Interactions model object fit by using the \code{\link[DImodels:DI]{DI()}} function from the \code{\link[DImodels:DImodels-package]{DImodels}} package.}

\item{FG}{A character vector specifying the functional grouping of the species in the design.}

\item{values}{A vector specifying the proportional split between the species within a functional group.
The default is to split the functional group proportional equally between each species.}

\item{cond_values}{A vector of numbers between 0 and 1 describing the values at which to takes slices of the ternary.
Necessary only when there are more than 3 functional groups.}

\item{cond_FG}{A character vector specifying the functional groups to slice the ternary on if there
are more than three functional groups. If there are more than three functional groups,
by default, the ternary diagrams will be conditioned on `add more stuff here`}

\item{exp_str}{A list specifying values for additional experimental
structures in the model other than the proportions.
This would be useful to compare the predictions across
different values for a categorical variable.
One plot will be generated for each unique combination
of values specified here.}

\item{resolution}{A number between 1 and 5 describing the resolution of the
resultant graph.
A high value would result in a higher definition figure
but at the cost of being computationally expensive.}

\item{nlevels}{The number of levels to show on the contour map.}

\item{colours}{A character vector or function specifying the colours for the
contour map. The number of colours should be same as `nlevels`.
The default colours scheme is the
\code{\link[grDevices:terrain.colors]{terrain.colors()}}.}

\item{lower_lim}{A number to set a custom lower limit for the contour.
The default is minimum of the prediction.}

\item{upper_lim}{A number to set a custom upper limit for the contour.
The default is maximum of the prediction.}

\item{contour_text}{A boolean value indicating whether to include labels on
the contour lines showing their values. The default is
\code{TRUE}.}

\item{show_axis_labels}{A boolean value indicating whether to show axis
labels along the edges of the ternary. The default
is \code{TRUE}.}

\item{show_axis_guides}{A boolean value indicating whether to show axis
guides within the interior of the ternary. The
default is \code{FALSE}.}

\item{axis_label_size}{A numeric value to adjust the size of the axis labels
in the ternary plot. The default size is 4.}

\item{vertex_label_size}{A numeric value to adjust the size of the vertex
labels in the ternary plot. The default size is 5.}

\item{nrow}{Number of rows in which to arrange the final plot}

\item{ncol}{Number of columns in which to arrange the final plot}
}
\value{
A ggmultiplot (ggplot if single plot is returned) class object
}
\description{
Conditional ternary diagrams at functional group level
}
\examples{
library(DImodels)
data(sim4)
m1 <- DI(y = "response", prop = paste0("p", 1:6),
         DImodel = "AV", data = sim4)

## If values is not specified then each the proportion is
## split equally between species in an FG
functional_ternary(model = m1, FG = c("G","G","L","L","H","H"),
                   resolution = 1)

## Can also manually specify the split to see different
## slice of ternary
functional_ternary(m1, FG = c("G","G","L","L","H","H"),
                   resolution = 1,
                   values = c(0, 1, 0.5, 0.5, 0, 1))

## If there are more than three functional groups
## then the ternary can be further sliced on three FGs
functional_ternary(m1, FG = c("G","G","L","H","H","M"),
                   resolution = 1, cond_FG = "M")

## Can further split functional group proportion for species
functional_ternary(m1, FG = c("G","G","L","H","H","M"),
                   resolution = 1, cond_FG = "M",
                   values = c(0, 1, 1, 0.5, 0.5, 1))
}
