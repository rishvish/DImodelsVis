% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FunctionalTernary.R
\name{functional_ternary_data}
\alias{functional_ternary_data}
\title{Conditional ternary diagrams at functional group level}
\usage{
functional_ternary_data(
  prop,
  FG,
  values = NULL,
  cond_values = NULL,
  cond_FG = NULL,
  exp_str = list(),
  resolution = 3,
  prediction = TRUE,
  ...
)
}
\arguments{
\item{prop}{A character vector indicating the model coefficients
corresponding to variable proportions.}

\item{FG}{A character vector specifying the functional grouping of the species in the design.}

\item{values}{A vector specifying the proportional split between the species within a functional group.
The default is to split the functional group proportional equally between each species.}

\item{cond_values}{A vector of numbers between 0 and 1 describing the values at which to takes slices of the ternary.
Necessary only when there are more than 3 functional groups.}

\item{cond_FG}{A character vector specifying the functional groups to slice the ternary on if there
are more than three functional groups. If there are more than three functional groups,
by default, the ternary diagrams will be conditioned on `add more stuff here`}

\item{exp_str}{A list specifying values for additional experimental
structures in the model other than the proportions.
This would be useful to compare the predictions across
different values for a categorical variable.
One plot will be generated for each unique combination
of values specified here.}

\item{resolution}{A number between 1 and 5 describing the resolution of the
resultant graph.
A high value would result in a higher definition figure
but at the cost of being computationally expensive.}

\item{prediction}{A logical value indicating whether to pass the final data
to `\link{add_prediction}` and add predictions to the data.
Default value is \code{TRUE}, but often it would be
desirable to make additional changes to the data before
making any predictions, so the user can set this to
\code{FALSE} and manually call the `\link{add_prediction}`
function.}

\item{...}{
  Arguments passed on to \code{\link[=add_prediction]{add_prediction}}
  \describe{
    \item{\code{model}}{A regression model object which will be used to make predictions for the observations in `data`.
Will override `coefficients` if specified.}
    \item{\code{coefficients}}{If a regression model is not available (or can't be fit in R), the regression coefficients from a model fit in some other language can be used to calculate predictions.
However, the user would have to ensure there's an appropriate one-to-one positional mapping between the data columns and the coefficient values.
Further, it would not be possible to calculate confidence/prediction intervals using this method.}
    \item{\code{coeff_cols}}{If `coefficients` are specified and there isn't a one-to-one positional mapping between}
    \item{\code{conf.level}}{The confidence level for calculating confidence/prediction intervals. Default is 0.95.}
    \item{\code{interval}}{Type of interval to calculate:
\describe{
  \item{"none" (default)}{No interval to be calculated.}
  \item{"confidence"}{Calculate a confidence interval.}
  \item{"prediction"}{Calculate a prediction interval.}
}}
  }}
}
\value{
A data-frame containing compositional columns with names specified
        in `FG` and `prop` parameters along with any additional columns
        specified in `exp_str` parameter and the following columns appended
        at the end.
 \describe{
   \item{.x}{The x-projection of the points within the ternary.}
   \item{.y}{The y-projection of the points within the ternary.}
   \item{.add_str_ID}{An identifier column for grouping the cartesian product
                      of all additional columns specified in `exp_str`
                      parameter (if `exp_str` is specified).}
   \item{.Sp}{An identifier column specifying the functional group along
              which the high dimensional simplex is sliced (if there are
              more than 3 functional groups).}
   \item{.Value}{The value (between 0 and 1) along the direction of functional
                 group in `.Sp` at which the high dimensional simplex is sliced.}
   \item{.Facet}{An identifier column formed by combining `.Sp` and `.value`
                 to group observations within a specific slice of the
                 high dimensional simplex.}
   \item{.Pred}{The predicted response for each community.}
   \item{.Lower}{The lower limit of the prediction/confidence interval
                 for each observation.}
   \item{.Upper}{The upper limit of the prediction/confidence interval
                 for each observation.}
 }
}
\description{
`Need to think of a simple description. Will be updated soon`
}
\examples{
library(DImodels)

## Load data
data(sim4)

## Fit model
mod <- glm(response ~ 0 + (p1 + p2 + p3 + p4 + p5 + p6)^2, data = sim4)

## Create data
## By default an equal split of the FG will be assumed for each species
head(functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G3"),
                             resolution = 1,
                             model = mod))

## Change the proportional split of species within an FG by using `values`
## `values` takes a numeric vector where the position of each element
## describes the proportion of the corresponding species within the
## corresponding FG
## For examples this vector describes, 0\% and 100\% of p1 and p2, respectively
## in G1, 100\% and 0\% of p3 and p4, respectively in G2 and 70\% and 30\% of
## p5 and p6, respectively in G3.
vals <- c(0, 1, 1, 0, 0.7, 0.3)
head(functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G3"),
                             values = vals,
                             resolution = 1,
                             model = mod))

## Can also add any additional experimental structures
head(functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G3"),
                             exp_str = list("treatment" = c("50", "150")),
                             values = vals,
                             model = mod,
                             resolution = 1))

## It could be desirable to take the output of this function and add
## additional variables to the data before making predictions
## Use `prediction = FALSE` to get data without any predictions
head(functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G3"),
                             values = vals,
                             resolution = 1,
                             prediction = FALSE))

## When there are more than three functional groups, we can
## fix the value of one of the functional groups using `cond_FG`
## and `cond_values` like conditional_ternary
head(functional_ternary_data(prop = paste0("p", 1:6),
                             FG = c("G1", "G1", "G2", "G2", "G3", "G4"),
                             resolution = 1,
                             cond_FG = "G4",
                             cond_values = c(0.2, 0.5),
                             model = mod,
                             prediction = TRUE))
}
